import math as m
import random
import matplotlib.pyplot as plt
from multiprocessing import Process, Pool
import numpy
def monte_karlo(p,n,k):
    N=1000
    today=0
    yesterday=0
    ill=[]
    day=[]
    sum=0
    for i in range(k):
        if (i+1)%4!=0:
            yesterday=today
            today=0
            for j in range(N-n):
                x=random.uniform(0,1)
                if x<(1-(1-p)**n):
                    today+=1
            sum+=n
            n+=today
            n=n-yesterday
        else:
            ill.append(sum//4)
            day.append(i+1)
            sum=0
    return ill

def frange(x, y, jump):
    while x < y:
        yield x
        x += jump



if __name__ == '__main__':

    d=100
    days=[]
    for i in range(d):
        if (i+1)%4==0:
            days.append(i+1)

    arr=[]

    pool = Pool(processes=4)
    for u in range(10):
        arru = [pool.apply_async(monte_karlo, args=(i, 1, d)) for i in frange(0.001, 0.1, 0.001)]
        arr.append([g.get() for g in arru])


    for i in range(len(arr[0])):
        sum=numpy.array(arr[0][i])
        for j in range(1,10):
            sum= sum + numpy.array(arr[j][i])
        a=numpy.divide(sum ,10)
        plt.plot(days,a)

    plt.show()
